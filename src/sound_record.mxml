<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="238" height="140"
			   creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.audio.format.WAVWriter;
			import com.hurlant.util.Base64;
			
			import flash.events.SampleDataEvent;
			import flash.external.ExternalInterface;
			import flash.media.Microphone;
			import flash.media.Sound;
			import flash.utils.ByteArray;
			
			import fr.kikko.lab.ShineMP3Encoder;
			
			[Bindable] private var microphoneList:Array;
			protected var microphone:Microphone = Microphone.getMicrophone();;
			protected var isRecording:Boolean = false;
			protected var soundRecording:ByteArray;
			protected var soundOutput:Sound;
			
			private var urlReq:URLRequest;
			private var sourceSnd:Sound;
			private var outputSnd:Sound;
			private var sChannel:SoundChannel;
			
			public var soundUploadConfig:Object = ExternalInterface.call("soundUploadConfig","");
			
			protected function init():void
			{
				microphoneList = Microphone.names;
				
				setupMicrophone(); //自动选择第一个音频硬件
			}
			
			/**
			 * 播放从 url 中获取的声音文件。
			 * 
			 * param _url:String   "a.mp3"
			 * 
			 * */
			
			protected function getSoundFromUrl(_url:String):void{
				urlReq= new URLRequest(_url);  
				sourceSnd=new Sound(); 
				sourceSnd.load(urlReq);
				sourceSnd.addEventListener(Event.COMPLETE, function(e:Event):void{
					outputSnd=new Sound(); 
					outputSnd.addEventListener(SampleDataEvent.SAMPLE_DATA, processSound);
					outputSnd.play();
				});
			}
			
			protected function processSound(event:SampleDataEvent):void
			{
				var bytes:ByteArray = new ByteArray();
				sourceSnd.extract(bytes, 8192); 
				
				while(bytes.bytesAvailable) {
					var sample:Number = bytes.readFloat();      
					//soundRecording.writeFloat(sample);     
				}
				event.data.writeBytes(bytes);
			}
			
			/**
			 * 选择麦克风
			 * 
			 * */
			protected function setupMicrophone():void
			{
				microphone = Microphone.getMicrophone(0);
				microphone.rate = 44;
				microphone.setUseEchoSuppression(true);
				microphone.setLoopBack(false);
				microphone.setSilenceLevel(0,0);
				microphone.gain=50;
				
				startRecordBTN.visible = true;
				stopRecordBTN.visible = false;
			}
			
			/**
			 * 开始录音
			 * 
			 * */
			protected function startMicRecording():void
			{	
				startRecordBTN.visible = false;
				stopRecordBTN.visible = true;
				
				starPlayBTN.enabled = false;
				uploadBTN.enabled = false;
				
				isRecording = true;
				soundRecording = new ByteArray();
				microphone.addEventListener(SampleDataEvent.SAMPLE_DATA, gotMicData);
				
				if(sChannel){
					sChannel.stop();
				}
				outputSnd = new Sound(); 
				outputSnd.addEventListener(SampleDataEvent.SAMPLE_DATA, processSound);
				sChannel = outputSnd.play();
				
			}
			
			/**
			 * 停止录音
			 * 
			 * */
			protected function stopMicRecording():void
			{
				startRecordBTN.visible = true;
				stopRecordBTN.visible = false;
				
				starPlayBTN.enabled = true;
				uploadBTN.enabled = true;
				
				isRecording = false;
				microphone.removeEventListener(SampleDataEvent.SAMPLE_DATA, gotMicData);
				if(sChannel){
					sChannel.stop();
				}
				outputSnd.removeEventListener(SampleDataEvent.SAMPLE_DATA, processSound);
			}
			
			/**
			 * 开始录音：获取声音
			 * 
			 * */
			private function gotMicData(micData:SampleDataEvent):void
			{
				while(micData.data.bytesAvailable) {
					var sample:Number = micData.data.readFloat();      
					soundRecording.writeFloat(sample);
					
					//////////////////////////////////////
					tips.text = "开始录音：" + String(soundRecording.length);
				}
				
			}
			
			/**
			 * 播放录音
			 * 
			 * */
			private var playRecord:Boolean = true;
			protected function playbackData():void
			{
				starPlayBTN.visible = false;
				stopPlayBTN.visible = true;
				
				soundRecording.position = 0;
				
				playRecord = true;
				
				soundOutput = new Sound();
				soundOutput.addEventListener(SampleDataEvent.SAMPLE_DATA, playSound);
				
				soundOutput.play();
			}
			
			//停止播放录音
			private function stopPlaybackData():void{
				playRecord = false;
				starPlayBTN.visible = true;
				stopPlayBTN.visible = false;
			}
			
			private function playSound(soundOutput:SampleDataEvent):void
			{
				//soundOutput.data.writeBytes(soundRecording);
				
				//////////////////////////////////////////
				tips.text = "播放录音：" + String(soundRecording.bytesAvailable);
				
				if(playRecord == false){
					return;
				}
				
				if (!soundRecording.bytesAvailable > 0){
					stopPlaybackData();
					return;				
				}
				
				for (var i:int = 0; i < 8192; i++)
				{
					var sample:Number = 0;
					if (soundRecording.bytesAvailable > 0){
						sample = soundRecording.readFloat();
					}
					soundOutput.data.writeFloat(sample); 
					soundOutput.data.writeFloat(sample);  
				}
			}
			
			private var mp3Encoder:ShineMP3Encoder;
			private function encodeToMP3():void {
				
				//////////
				tips.text = '开始转换临时格式 wav';
				
				var wavWriter:WAVWriter = new WAVWriter();
				soundRecording.position = 0;
				
				wavWriter.numOfChannels = 1; 
				wavWriter.sampleBitRate = 16; 
				wavWriter.samplingRate = 44100; 
				
				var wav:ByteArray = new ByteArray();
				
				wavWriter.processSamples(wav, soundRecording, 44100, 1);
				
				wav.position = 0;
				
				mp3Encoder = new ShineMP3Encoder(wav);
				mp3Encoder.addEventListener(Event.COMPLETE, mp3EncodeComplete);
				mp3Encoder.addEventListener(ProgressEvent.PROGRESS, mp3EncodeProgress);
				mp3Encoder.addEventListener(ErrorEvent.ERROR, mp3EncodeError);
				mp3Encoder.start();
			}
			private function mp3EncodeProgress(event : ProgressEvent) : void {
				
				tips.text = "正在转换格式：" + event.bytesLoaded + " : " + event.bytesTotal + "，请稍后。。。";
			}
			
			private function urlPostProgress(event : ProgressEvent) : void {
				tips.text = "正在上传：" + event.bytesLoaded + " : " + event.bytesTotal + ".请稍后。。。";
			}
			
			private function mp3EncodeError(event : ErrorEvent) : void {
				
				tips.text = "Error : " + event.text;
			}
			private function mp3EncodeComplete(event:Event) : void {
				
				mp3Encoder.mp3Data.position = 0;
				
				tips.text = "转换格式 mp3 成功，长度：" + String(mp3Encoder.mp3Data.length)
					+ '\n\n开始上传，请稍后。。。';
				
				upload();
			}
			
			public function upload():void{
				
				var params:URLVariables=new URLVariables();
				for(var i:* in soundUploadConfig){
					params[i] = soundUploadConfig[i];
				}
				params.file = Base64.encodeByteArray(mp3Encoder.mp3Data);
				
				var _request:URLRequest = new URLRequest();
				_request.url = soundUploadConfig.uploadURL;
				_request.method = URLRequestMethod.POST;
				_request.data = params;					
				_request.requestHeaders = new Array(new URLRequestHeader("Content-Type", "application/x-www-form-urlencoded"));
				
				var urlLoader:URLLoader = new URLLoader();
				urlLoader.dataFormat = URLLoaderDataFormat.TEXT;
				urlLoader.addEventListener(Event.COMPLETE, function(event:Event):void{
					tips.text += '\n\n上传成功';
					ExternalInterface.call("soundUploadCallback", JSON.parse(event.currentTarget.data));
				});
				urlLoader.addEventListener(ProgressEvent.PROGRESS, urlPostProgress);
				urlLoader.load(_request);
			}
			
		]]>
	</fx:Script>
	
	<!--
	<mx:ComboBox id="comboMicList" x="67" y="63" width="196" dataProvider="{microphoneList}"/>
	<s:Button x="279" y="63" width="90" label="选择麦克风" click="setupMicrophone()"/>-->
	
	<s:Button id="startRecordBTN" buttonMode="true" x="6" y="5" width="70" label="开始录音" click="startMicRecording()" />
	<s:Button id="stopRecordBTN" visible="false" buttonMode="true" x="6" y="5" width="70" label="停止录音" click="stopMicRecording()"/>
	
	<s:Button id="starPlayBTN" enabled="false" buttonMode="true" x="84" y="5" width="70" label="播放录音" click="playbackData()"/>
	<s:Button id="stopPlayBTN" visible="false" buttonMode="true" x="84" y="5" width="70" label="停止播放" click="stopPlaybackData()"/>
	
	<s:TextArea x="7" y="34" width="221" id="tips" height="96" />
	
	<s:Button id="uploadBTN" enabled="false" buttonMode="true" x="161" y="5" width="70" label="上传" chromeColor="#8CD0FF" click="encodeToMP3()"
			  color="#000000"/>
	
	<!--
	<s:Button x="134" y="108" label="播放 test.mp3" click="getSoundFromUrl('./file_upload/test.mp3?'+Math.random())"/>-->
	
	
</s:Application>